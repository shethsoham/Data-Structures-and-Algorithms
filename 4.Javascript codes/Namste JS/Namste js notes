Day 1: Notes : How JavaScript Works üî•& Execution Context | Namaste JavaScript Ep.1

How JavaScript works?
Ans-Everything in JavaScript happens inside an "execution context".

Execution context has two component
1) memory component[variable environment]
-This is the place where all variables and functions are stored as key value pairs. eg-{key: value || n:2;}

2) code component[Thread of execution]
-This is the place where code is executed one line at a time

Note-
JavaScript is a synchronous single-threaded language

-Single threaded means JavaScript can execute once command at a time
-Synchronous single-threaded that means JavaScript can execute one command at a time in a specific order
--------------------------------------------------------------------------------------------------------------------------------------

That whole thing is called as execution context inside that there two things 
1.Memory component
2.Code component
In memory component variable and functions values can be stored in a  key value format.
Code component is a place where whole JavaScript code is executed
Memory component is also called as variable environment 
And code component is also called as thread of execution.

--------------------------------------------------------------------------------------------------------------


DAY 2: NOTES : How JavaScript Code is executed? ‚ù§Ô∏è& Call Stack | Namaste JavaScript Ep. 2

1. Whenever any JavaScript code is executed an execution context is created and it is the Global Execution Context.
2. An Execution Context is basically a box which has two components called Memory Component(Variable Environment) and Code Component(Thread Of Execution).
3. The Execution context is created in two phases
   a. Memory Creation Phase : In this Phase, Memory is allocated to all the variables and functions which are present in the           global scope. Special keyword Undefined in case of variables and literally the whole function in case of functions.
   b. Code Execution Phase : In this Phase, code is executed line by line.

4. Whenever there is a function invocation an all new execution context is created and same process is followed again.
5. If there is any function parameter then it is also allocated memory while creating the execution context of the function.
6. Whenever return keyword is encountered , it means the task of function is over and it returns back the control of the program back to the place where it was invoked. and with this this execution context is deleted from stack.

7. Call Stack is basically a stack which maintains the order of execution of execution context. Whenever a code is executed the Global Execution Context is pushed into the stack first and later on as per the function invocation the  execution context is pushed into the stack. When the function code is done executing the execution context is popped out and last the Global Execution Context s also deleted.

--------------------------------------------------------------------------------------------------------------

 everything happens in javascript in the execution environment. So the entire execution happens in two phases as follows
1. Memory allocation phase- all the variables  and functions get their memory allocated in the memory with undefined and the entire code  respectively. 
2. Code execution phase - in this phase  thread execution happens and all the variables get their actual values which were assigned to them and as function is invoked, a new execution environment gets created in the code part, and again there are two phases, memory allocation phase and code execution phase. And the cycle repeats.

--------------------------------------------------------------------------------------------------------------
Call Stack Known As
0. Call Stack
1. Execution Context Stack
2. Program Stack
3. Control Stack
4. Runtime Stack
5. Machine Stack

---------------------------------------------------------------------------------------------------------------------------

DAY 3 NOTES: Hoisting in JavaScript üî•(variables & functions) | Namaste JavaScript Ep. 3

2 Golden Rules:
1. Variable declarations are scanned and are made undefined
2. Function declarations are scanned and are made available


------------
variable declarations moving to the top...nothing is moving to the top and thats the reason he explained all this. When js code runs and execution context is created and 2 phases happens 1)Memory execution phase 2)Code phase.In memory allocation phase it skims the js code and allocate memory to variables(undefined) and function(full code). When u try to access those without initializing those values are printed ...that is the mechanism of javascript called Hoisting.

---------------------

1. In JS, before the code is executed, the variables get initialized to undefined.
2. Arrow functions enact as variables and get "undefined" during the memory creation phase while functions actually get run.
3. Hoisting: Mechanism in JS where the variable declarations are moved to the top of the scope before execution. Therefore it is possible to call a function before initializing it.
4. Whenever a JS program is run, a global execution block is created, which comprises of 2: Memory creation and Code execution.
5. Variable declarations are scanned and are made undefined
6. Function declarations are scanned and are made available

----------------------

Hoisting will work with a variable ONLY when it is declared using the var keyword, but will not work when a variable is declared using the let keyword which is now the standard of declaring variables in JavaScript

-------------------------------

1. Hoisting in JavaScript is a process in which all the Variables, Functions and Class defination are declared BEFORE execution of the code 
3. Variables are initialised to UNDEFINED when they are declared and Function defination is stored AS IT IS.
4. They are declared in Memory Allocation Phase in the Memory Component of Execution Context, so we can use them even BEFORE they are declared.
5. UNDEFINED means Variable has been declared but value is not ASSIGNED but NOT DEFINED means Variables is NOT DECLARED.
6. When we assign Variable to a Function defination, we CAN NOT call this Variable as Function BEFORE declaration as it will behave as Variable with UNDEFINED value.

------------------------------------


DAY 4 : NOTES : How functions work in JS ‚ù§Ô∏è & Variable Environment | Namaste JavaScript Ep. 4

--------------------------
1. We learnt how functions work in JS.
2. At first a global execution context is created, which consists of Memory and code and has 2 phases: Memory allocation phase and code execution phase.
3. In the first phase, the variables are assigned "undefined" while functions have their own code.
4. Whenever there is a function declaration in the code, a separate local execution context gets created having its own phases and is pushed into the call stack.
5. Once the function ends, the EC is removed from the call stack.
6. When the program ends, even the global EC is pulled out of the call stack.


--------------------------------------------

1) The higher level of the GEC on the stack, higher its preference
2) GEC is created as the function is invoked and destroyed as its execution is completed
3) same variable names but different scope of execution separates the variable values

-----------------------------------------------------------------------------------------------------------------------------------------------

DAY 5 :NOTES SHORTEST JS Program üî•window & this keyword | Namaste JavaScript Ep. 5
----------------------------------------------------------------------------------------------------------------------------------

1. Shortest Program in JS: Empty file. Still, browsers make global EC and global space along with Window object.
2. Global Space: Anything that is not in a function, is in the global space.
3. Variables present in a global space can be accessed by a "window" object. (like window.a)
4. In global space, (this === window) object.


1)Reserves the memory space specifically for GEC to be created in stack
2) GEC is created
3) Creates a 'Window': a javascript 'global object' which 'runs with GEC' with an object whose values are in global scope(can be accessed by using any of the key in 1:37 )
4) js object 'this' is created (really the name is 'this') and this level this=== window
5) then our script starts execution
The variable in javascript always assigns its value from Global level (unless specified earlier 'in the script' itself or in function)

and if you defined a variable (eg. a=10) : this.a===10; global.a===10;

----------------------------------------------------------------------------------------------------------------------------

DAY 6 : undefined vs not defined in JS ü§î | Namaste JavaScript Ep. 6
----------------------------------------------------------------------------------------------------------------------------
1. Undefined is like a placeholder till a variable is not assigned a value.
2. undefined !== not defined
3. JS- weakly typed language since it doesn't depend on data type declarations.
---------------------


1.Undefined is a Special Placeholder which is used to reserve memory for the variables in the memory creation phase. Even before a single line of code is executed JS engine assigns undefined to the variables.

2.Not Defined means if we try to console or access any variable which is not declared in the code then we get Not Defined error.

3. JS is a loosely typed language or weakly typed language means it does not attaches its variables to specific data types like in C++ and java.

4.Remember undefined !== not defined

---------------------------------------------------------------------------------------------------

1) It explains the "undefined" keyword in JavaScript and its role in indicating the absence of a value or the uninitialized state of a variable.
2) The concept of a variable being "not defined" is explored, which refers to a situation where a variable has not been declared or is not accessible in the current scope.
3) The video discusses scenarios where variables are implicitly assigned "undefined" due to hoisting or other factors.
4) It might delve into the difference between "undefined" and "null" in JavaScript and when to use each of these values.
5) The content provides examples and code demonstrations to illustrate the differences and proper usage of "undefined" and "not defined."
6) The video also addresses common programming mistakes or misconceptions related to these concepts.
7) It highlights the importance of understanding the differences between "undefined" and "not defined" to write clean and bug-free JavaScript code.

------------------------------------------------------------------------------------

When you have declared a variable and not initialized it, then during the memory allocation phase, this variable will be assigned with undefined.
So, undefined is like a placeholder that is kept for the time being, until a value is assigned to the variable.
It states that the variable is not assigned with anything.

JS is a loosely typed language as you don't need to define whether it is a string or a number or a boolean. It doesn't attach the variable to any particular data type.

--------------------------------------------------------------------------------------------------------------------------------------

DAY 7: NOTES: The Scope Chain, üî•Scope & Lexical Environment | Namaste JavaScript Ep. 7

--------------------------------------------------------------------------------------------------------------------------------------

1. Scope of a variable is directly dependent on the lexical environment.
2. Whenever an execution context is created, a lexical environment is created. Lexical environment is the local memory along with the lexical environment of its parent. Lexical as a term means in hierarchy or in sequence.
3. Having the reference of parent's lexical environment means, the child or the local function can access all the variables and functions defined in the memory space of its lexical parent.
4. The JS engine first searches for a variable in the current local memory space, if its not found here it searches for the variable in the lexical environment of its parent, and if its still not found, then it searches that variable in the subsequent lexical environments, and the sequence goes on until the variable is found in some lexical environment or the lexical environment becomes NULL.
5. The mechanism of searching variables in the subsequent lexical environments is known as Scope Chain. If a variable is not found anywhere, then we say that the variable is not present in the scope chain.

-----------------------------------------------------------------------------------------------------------------------------------------



DAY 8 : let & const in JS üî•Temporal Dead Zone | | Namaste JavaScript Ep. 8
------------------------------------------------------------------------------------------------------------------------------------------

1. let and const are hoisted but its memory is allocated at other place than window which cannot be accessed before initialisation.
2. Temporal Dead Zone exists until variable is declared and assigned a value.
3. window.variable OR this.variable will not give value of variable defined using let or const.
4. We cannot redeclare the same variable with let/const(even with using var the second time).
5. const variable declaration and initialisation must be done on the same line.
6. There are three types of error: 
    [1] referenceError {given where variable does not have memory allocation} 
    [2] typeError {given when we change type that is not supposed to be changed}
    [3] syntaxError {when proper syntax(way of writing a statement) is not used}.
7. Use const wherever possible followed by let, Use var as little as possible(only if you have to). It helps avoid error.
8. Initialising variables at the top is good idea, helps shrinks TDZ to zero.

------------------------------------------------------------------------------------------------------------------------

-> let and const are hoisted. we cant use them before initialization is result of "temporal dead zone".
-> js use diff memory than global execution context to store let and cost. which is reason behind "temporal dead zone"
-> level of strictness ... var<<let<<const.
-> var //no temporal dead zone, can redeclare and re-initialize, stored in GES
    let //use TDZ, can't re-declare, can re-initialize, stored in separate memory
    const //use TDZ, can't re-declare, can't re-initialize, stored in separate memory
-> syntax error is similar to compile error. while type and reference error falls under run time error.
-> syntax error ... violation of JS syntax
    type error ...  while trying to re-initialize const variable
    reference error ... while trying to access variable which is not there in global memory.

------------------------------------------------------------------------------------------------------------------------


DAY 9 : BLOCK SCOPE & Shadowing in JS üî•| Namaste JavaScript üôè Ep. 9
-------------------------------------------------------------------------------------------------------------------

1. Code inside curly bracket is called block.
2. Multiple statements are grouped inside a block so it can be written where JS expects single statements like in if, else, loop, function etc.
3. Block values are stored inside separate memory than global. They are stored in block. (the reason let and const are called block scope)
4. Shadowing of variables using var, let and const.
5. The shadow should not cross the scope of original otherwise it will give error.
6. shadowing let with var is illegal shadowing and gives error.
7. var value is stored in nearest outer function or global scope and hence can be accessed outside block as well whereas same is not the case with let and const.

----------------------------------------------

Block :- It is used to combine multiple statement into one statement so that we can use it at those places where javascript expects to have single statement.
Scope :- scope of a variable or a function is the place where these are accessible.
Block scope :-  The variables and function present within the scope of a block section. And block follows the lexical scope chain 

--------------------------------------------------------------------------------------------------------------------------


DAY 10 : NOTES CLOSURES Closures in JS üî• | Namaste JavaScript Episode 10
---------------------------------------------------------------------------------------------------------------------------

Closure :Function bundled with its lexical environment is known as a closure. Whenever function is returned, even if its vanished in execution context but still it remembers the reference it was pointing to. Its not just that function alone it returns but the entire closure and that's where it becomes interesting 

1. Function bundled with lexical scope is called closure.
2. Even if we return the function, it still remembers its original lexical environment and local storage so it can access values.
3. If we write return function x(){.....} --- this automatically returns the value.
4. The function that is returned is reference so any change in value of that variable inside function will be reflected as such.

--------------------------------------------------------------------------------------------------------------------------------------------
DAY 11: NOTES: setTimeout + Closures Interview Question üî• | Namaste üôè JavaScript Ep. 11
----------------------------------------------------
Things learned:
1. setTimeout stores the function in a different place and attached a timer to it, when the timer is finished it rejoins the call stack and executed.
2. Without closure the var reference gives the latest value as it does not retain the original value but rather has the reference so any update in value after timeout will be shown.
3. If we use let/const because they have block scope, every time a new copy of variable is attached, thus this can be done without closure.